syntax = "proto3";
package auth.v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (
    grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
        info: {
            title: "Authentication service";
            version: "1.0";
            contact: {
                name: "auth-service";
                url: "https://github.com/zero-frost/auth-service";
                email: "zero_frost@protonmail.com";
            };
        };
        schemes: HTTP;
        consumes: "application/json";
        produces: "application/json";
        responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};


option go_package = "v1";

message CreateUserRequest {
    string api = 1;
    string email = 2;
    string username = 3;
    string password = 4;
}

message CreateUserResponse {
    enum ErrorCode {
        BAD_REQUEST = 0;
        INTERNAL_ERROR = 1;
        INVALID_EMAIL = 2;
        INVALID_USERNAME = 3;
        USERNAME_TAKEN = 4;
        EMAIL_IN_USE = 5;
        BLANK_USERNAME = 6;
        BLANK_PASSWORD = 7;
    }
    string api = 1;
    bool success = 2;
    ErrorCode error_code = 3;
}

message SetUserValidationRequest {
    string api = 1;
    string username = 2;
    bool is_validated = 3;
}

message SetUserValidationResponse {
    enum ErrorCode {
        BAD_REQUEST = 0;
        INTERNAL_ERROR = 1;
        USER_DOES_NOT_EXIST = 2;
        USER_ALREADY_VALIDATED = 3;
    }

    string api = 1;
    bool success = 2;
    ErrorCode error_code = 3;
}

message LoginRequest {
    string api = 1;
    string username = 2;
    string password = 3;
}

message LoginResponse {
     enum ErrorCode {
        BAD_REQUEST = 0;
        INTERNAL_ERROR = 1;
        INCORRECT_USERNAME_OR_PASSWORD = 2;
        BLANK_USERNAME = 3;
        BLANK_PASSWORD = 4;
    }
    string api = 1;
    bool success = 2;
    string token = 3;
    ErrorCode error_code = 4;
}

service Auth {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
                                   post: "/v1/auth"
                                   body: "*"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
                                    post: "/v1/auth/login"
                                    body: "*"
        };
    }
}
